[{"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\index.js":"1","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\reportWebVitals.js":"2","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\App.js":"3","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\store.js":"4","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Background\\Background.jsx":"5","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Home\\Home.jsx":"6","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Header\\Header.jsx":"7","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Host\\Host.jsx":"8","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\CustomRoutes\\ProtectedRoute.jsx":"9","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Error404\\Error404.jsx":"10","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Party\\Party.jsx":"11","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\reducer.js":"12","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\initialState.js":"13","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Services\\ServiceCalls.js":"14","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Carousel\\Carousel.jsx":"15","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Loader\\Loader.jsx":"16","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Player\\Player.jsx":"17","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Tutorial\\Tutorial.jsx":"18","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\index.js":"19","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\reportWebVitals.js":"20","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\App.js":"21","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\store.js":"22","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Background\\Background.jsx":"23","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Host\\Host.jsx":"24","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Home\\Home.jsx":"25","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Header\\Header.jsx":"26","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Party\\Party.jsx":"27","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Error404\\Error404.jsx":"28","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\CustomRoutes\\ProtectedRoute.jsx":"29","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\initialState.js":"30","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\reducer.js":"31","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Services\\ServiceCalls.js":"32","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Loader\\Loader.jsx":"33","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Player\\Player.jsx":"34","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Tutorial\\Tutorial.jsx":"35","D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Carousel\\Carousel.jsx":"36"},{"size":455,"mtime":1610261907138,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":1275,"mtime":1613152632758,"results":"40","hashOfConfig":"38"},{"size":188,"mtime":1609915393031,"results":"41","hashOfConfig":"38"},{"size":5116,"mtime":1614020040305,"results":"42","hashOfConfig":"38"},{"size":16679,"mtime":1610453256281,"results":"43","hashOfConfig":"38"},{"size":5501,"mtime":1614020573822,"results":"44","hashOfConfig":"38"},{"size":37248,"mtime":1613163947420,"results":"45","hashOfConfig":"38"},{"size":607,"mtime":1611148564575,"results":"46","hashOfConfig":"38"},{"size":1848,"mtime":1611499781100,"results":"47","hashOfConfig":"38"},{"size":1227,"mtime":1614017456706,"results":"48","hashOfConfig":"38"},{"size":734,"mtime":1612632050104,"results":"49","hashOfConfig":"38"},{"size":287,"mtime":1613162822564,"results":"50","hashOfConfig":"38"},{"size":1812,"mtime":1614017807454,"results":"51","hashOfConfig":"38"},{"size":4022,"mtime":1609769131688,"results":"52","hashOfConfig":"38"},{"size":2545,"mtime":1613163970356,"results":"53","hashOfConfig":"38"},{"size":14686,"mtime":1614095046194,"results":"54","hashOfConfig":"38"},{"size":13304,"mtime":1612976432405,"results":"55","hashOfConfig":"38"},{"size":455,"mtime":1610261907138,"results":"56","hashOfConfig":"57"},{"size":362,"mtime":499162500000,"results":"58","hashOfConfig":"57"},{"size":1275,"mtime":1613152632758,"results":"59","hashOfConfig":"57"},{"size":188,"mtime":1609915393031,"results":"60","hashOfConfig":"57"},{"size":5118,"mtime":1614700402727,"results":"61","hashOfConfig":"57"},{"size":32945,"mtime":1614702286764,"results":"62","hashOfConfig":"57"},{"size":16679,"mtime":1614704710566,"results":"63","hashOfConfig":"57"},{"size":5478,"mtime":1614701353264,"results":"64","hashOfConfig":"57"},{"size":1227,"mtime":1614017456706,"results":"65","hashOfConfig":"57"},{"size":1848,"mtime":1611499781100,"results":"66","hashOfConfig":"57"},{"size":607,"mtime":1611148564575,"results":"67","hashOfConfig":"57"},{"size":287,"mtime":1613162822564,"results":"68","hashOfConfig":"57"},{"size":734,"mtime":1612632050104,"results":"69","hashOfConfig":"57"},{"size":1812,"mtime":1614017807454,"results":"70","hashOfConfig":"57"},{"size":2545,"mtime":1613163970356,"results":"71","hashOfConfig":"57"},{"size":14686,"mtime":1614095046194,"results":"72","hashOfConfig":"57"},{"size":13304,"mtime":1612976432405,"results":"73","hashOfConfig":"57"},{"size":4042,"mtime":1614704788560,"results":"74","hashOfConfig":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"b52vhk",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sbv8dl",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\index.js",[],["150","151"],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\reportWebVitals.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\App.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\store.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Background\\Background.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Home\\Home.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Host\\Host.jsx",["152"],"import React, { Component, createRef } from 'react';\r\nimport \"./Host.scss\"\r\nimport { connect } from 'react-redux';\r\nimport { isMobile } from 'react-device-detect';\r\nimport Player from '../Player/Player';\r\nimport { TabContext, TabPanel } from '@material-ui/lab';\r\nimport { Grid, IconButton, InputAdornment, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, Menu, MenuItem, RootRef, Tab, Tabs, TextField, Typography } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFrown } from \"@fortawesome/free-regular-svg-icons\"\r\nimport { Delete, DragIndicator, MoreVert, Search } from '@material-ui/icons';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport simpleyt from \"simpleyt\"\r\nimport Loader from '../Loader/Loader';\r\nimport * as Service from \"./../Services/ServiceCalls\"\r\nimport Wave from \"@foobar404/wave\"\r\nimport socketIOClient from \"socket.io-client\"\r\nimport Tutorial from '../Tutorial/Tutorial';\r\n\r\n\r\nconst useStyles = () => ({\r\n    tabsRootContainer: {\r\n        width: \"70%\",\r\n        margin: \"auto\",\r\n        border: \"2px solid white\",\r\n        borderRadius: \"5px\",\r\n    },\r\n    tabsRoot: {\r\n        width: \"70%\",\r\n    },\r\n    leftTabsRoot: {\r\n        background: \"linear-gradient(to right, black, #252525)\",\r\n\r\n    },\r\n    rightTabsRoot: {\r\n        width: \"70%\",\r\n        background: \"linear-gradient(to left, black, #252525)\",\r\n\r\n    },\r\n    tabPanel: {\r\n        padding: \"0px\",\r\n        height: \"90%\",\r\n        width: \"60%\",\r\n    },\r\n    leftTabPanel: {\r\n        background: \"linear-gradient(to right, #101010, #252525)\",\r\n    },\r\n    rightTabPanel: {\r\n        background: \"linear-gradient(to left, #101010, #252525)\",\r\n    },\r\n    listRoot: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\"\r\n    },\r\n    searchResultListItemRoot: {\r\n        borderBottom: \"1px solid\",\r\n        borderImage: \"linear-gradient(to right, transparent 0%, #01a4e9 20%, white 40%, white 60%, #01a4e9 80%, transparent 100%) 1\",\r\n        \"&:hover\": {\r\n            background: \"#353535\"\r\n        },\r\n        \".MuiTypography-colorTextSecondary\": {\r\n            color: \"white\"\r\n        },\r\n        \".MuiListItemText-primary\": {\r\n            color: \"white\"\r\n        }\r\n\r\n    },\r\n    searchResultListItemTextPrimary: {\r\n        color: \"white\",\r\n    },\r\n    searchResultListItemTextSecondary: {\r\n        color: \"#ffffffbb\",\r\n        marginTop: \"10px\",\r\n    },\r\n    textFieldRoot: {\r\n        width: \"80%\",\r\n        margin: \"10px 0px 0px\"\r\n    },\r\n    textFieldLabelRoot: {\r\n        color: \"#a9a9a9\",\r\n        \"&.focused\": {\r\n            color: \"#01a4e9\"\r\n        },\r\n        \"&.error\": {\r\n            color: \"#f44336\"\r\n        }\r\n    },\r\n    textFieldUnderlineRoot: {\r\n        \"&::after\": {\r\n            borderBottom: \"2px solid #01a4e9\"\r\n        },\r\n        \"&::before\": {\r\n            borderBottom: \"2px solid #a9a9a9\"\r\n        },\r\n        \"&&:hover:before\": {\r\n            borderBottom: \"2px solid #efeffa\"\r\n        }\r\n    },\r\n    textFieldInput: {\r\n        color: \"white\"\r\n    },\r\n    helperText: {\r\n        color: \"white\"\r\n    },\r\n    icons: {\r\n        color: \"white\"\r\n    },\r\n    iconButton: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"#01a4e9ee\"\r\n        }\r\n    },\r\n    menuRoot: {\r\n        // backgroundColor: \"black\"\r\n        \"& .MuiPaper-root\": {\r\n            backgroundColor: \"#333333\",\r\n            color: \"white\"\r\n        }\r\n    },\r\n    menuItemRoot: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"#01a4e9\"\r\n        }\r\n    },\r\n    listItemRoot: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"#01a4e999\"\r\n        }\r\n    }\r\n})\r\n\r\nclass Host extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            leftListTabValue: 0,\r\n            rightListTabValue: 0,\r\n            searchBarText: \"\",\r\n            searchResults: [],\r\n            currentSongUrl: \"\",\r\n            loaderDisplay: false,\r\n            selectedItemIndex: null,\r\n            menuAnchor: null,\r\n            songQueue: [\r\n                // { title: \"Blastoyz - Mandala\", url: \"https://www.youtube.com/watch?v=FHVD9ft_ANw\" },\r\n                // { title: \"Memories\", url: \"https://www.youtube.com/watch?v=SlPhMPnQ58k\" },\r\n                // { title: \"Freesol\", url: \"https://www.youtube.com/watch?v=7-9DJX8NlHU\" },\r\n            ],\r\n            existingSongs: [\r\n                // { title: \"Blastoyz - Mandala\", url: \"https://www.youtube.com/watch?v=FHVD9ft_ANw\" },\r\n                // { title: \"Memories\", url: \"https://www.youtube.com/watch?v=SlPhMPnQ58k\" },\r\n                // { title: \"Freesol\", url: \"https://www.youtube.com/watch?v=7-9DJX8NlHU\" },\r\n            ],\r\n            wave: new Wave(),\r\n            tutorialScreen: 0,\r\n\r\n        };\r\n        this.userData = JSON.parse(localStorage.getItem(\"userInfo\"))\r\n        this.socket = socketIOClient();\r\n        this.myAudio = null;\r\n        this.playerRef = createRef();\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // setting user details in store\r\n\r\n        // getting the existing song list\r\n        this.props.dispatchToStore(\"SET_USER_DETAILS\", { hostName: this.userData.hostName, partyName: this.userData.partyName })\r\n\r\n        this.myAudio = document.getElementById(\"audio\")\r\n\r\n        // get tutorial status from backend\r\n        // if tutorial status is true, display tutorial\r\n        Service.getTutorialStatus(this.userData).then(response => {\r\n            console.log(response)\r\n            if (response.data) {\r\n                this.props.dispatchToStore(\"DISPLAY_TUTORIAL\", { displayTutorial: true })\r\n            }\r\n            else {\r\n                this.getExistingSongs()\r\n            }\r\n        })\r\n\r\n        // connecting to room\r\n        this.socket.emit(\"connect-to-room\", this.userData.partyName)\r\n\r\n        // this.socket.on(\"play-pause\", data => {\r\n        //     if (data.refresh) {\r\n        //         this.myAudio.load()\r\n        //         this.myAudio.play()\r\n        //     }\r\n        //     this.setState({ loaderDisplay: false })\r\n        // })\r\n        // this.socket.on(\"song-updated\", data => {\r\n        //     if (data.refresh) {\r\n        //         this.myAudio.load()\r\n        //         this.myAudio.play()\r\n        //     }\r\n        //     this.setState({ loaderDisplay: false })\r\n        // })\r\n\r\n        // sound visualizer\r\n        this.state.wave.fromElement(\"audio\", \"canvas\", {\r\n            // options here\r\n            type: \"shine\",\r\n            colors: [\"#01a4e9\", \"black\"],\r\n        });\r\n        var index = 1;\r\n        var test = 0\r\n        var interval = setInterval(() => {\r\n            if (test <= 1) {\r\n                this.setState({ circleOffset: index.toFixed(2) }, () => {\r\n                    test = test + 0.01\r\n                    index = 1 - test / 2;\r\n                })\r\n            } else {\r\n                clearInterval(interval)\r\n            }\r\n        }, 200)\r\n        if (this.props.globalState.displayTutorial) {\r\n            console.log(this.props.globalState.displayTutorial)\r\n            this.getExistingSongs();\r\n        }\r\n\r\n    }\r\n\r\n    getExistingSongs = () => {\r\n        this.setState({ loaderDisplay: true }, () => {\r\n            Service.getSongs(this.props.globalState.userData).then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({ existingSongs: response.data, loaderDisplay: false }, () => { console.log(response.data) })\r\n                }\r\n            }).catch(error => {\r\n                console.error(error, error.response)\r\n                alert(error.response.data)\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    getVideoDetails = (item) => {\r\n        if (item !== undefined && item !== \"\") {\r\n            const getDataUrl = \"https://www.youtube.com/oembed?url=\" + item + \"&format=json\";\r\n\r\n            fetch(getDataUrl, {\r\n                mode: \"cors\",\r\n                method: \"GET\"\r\n            })\r\n                .then((response) => {\r\n                    return response.text();\r\n                })\r\n                .then((data) => {\r\n                    data = JSON.parse(data);\r\n                    data.songUrl = item\r\n                    this.props.dispatchToStore(\"SET_SONG_DETAILS\", data)\r\n                })\r\n                .catch((error) => console.error(error));\r\n        }\r\n    };\r\n\r\n    reorderElements = (list, from, to) => {\r\n        var queue = list;\r\n        let cutOut = queue.splice(from, 1)[0];   // cut the element at index 'from'\r\n        queue.splice(to, 0, cutOut);             // insert it at index 'to'\r\n        return queue;\r\n    }\r\n\r\n    onQueueDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const items = this.reorderElements(\r\n            this.state.songQueue,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n        this.getVideoDetails(items[0].url)\r\n        if (items[0].url !== this.state.songQueue[0]) {\r\n            this.socket.emit(\"change-current-song\", { currentSong: items[0].url })\r\n            // this.myAudio.load();\r\n        }\r\n        this.setState({\r\n            songQueue: items,\r\n            loaderDisplay: false\r\n        });\r\n    }\r\n\r\n    setTutorialDetailsState = (state) => {\r\n        console.log(state)\r\n        this.setState(state)\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle,\r\n\r\n        ...(isDragging && {\r\n            background: \"#01a4e999\",\r\n            position: \"static\",\r\n        })\r\n    });\r\n    getListStyle = (isDraggingOver) => ({\r\n        // background: isDraggingOver ? '#01a4e9' : 'lightgrey',\r\n    });\r\n\r\n    componentWillUnmount = () => {\r\n        this.props.dispatchToStore(\"SET_USER_DETAILS\", { hostName: \"\", partyName: \"\" })\r\n        const songDetails = {\r\n            title: \"\",\r\n            songUrl: \"\",\r\n            thumbnail_url: \"\"\r\n        }\r\n        this.props.dispatchToStore(\"SET_SONG_DETAILS\", songDetails)\r\n        document.body.onkeyup = null;\r\n    }\r\n\r\n    closeMenu = () => {\r\n        this.setState({ menuAnchor: null, selectedItemIndex: null })\r\n    }\r\n\r\n    playNextSong = () => {\r\n        var items = this.reorderElements(this.state.songQueue, 0, this.state.songQueue.length)\r\n        this.getVideoDetails(items[0].url)\r\n        // this.socket.emit(\"change-current-song\", { currentSong: items[0].url })\r\n        // this.myAudio.load();\r\n        this.setState({\r\n            songQueue: items,\r\n        });\r\n\r\n    }\r\n    playPreviousSong = () => {\r\n        var items = this.reorderElements(this.state.songQueue, this.state.songQueue.length - 1, 0)\r\n        this.getVideoDetails(items[0].url)\r\n        this.socket.emit(\"change-current-song\", { currentSong: items[0].url })\r\n        // this.myAudio.load();\r\n\r\n        this.setState({\r\n            songQueue: items,\r\n        });\r\n    }\r\n\r\n    playSong = (index) => {\r\n        if (this.state.songQueue[0] != undefined) {\r\n            var songQueue = this.reorderElements(this.state.songQueue, index, 0)\r\n            console.log(songQueue)\r\n            this.getVideoDetails(songQueue[0].url)\r\n            // change song\r\n            this.setState({\r\n                songQueue: songQueue\r\n            })\r\n        }\r\n\r\n        // this.socket.emit(\"play-pause\", { currentSong: this.state.currentSongUrl, currentTime: this.myAudio.currentTime, status: !this.myAudio.paused })\r\n    }\r\n\r\n    addToQueue = () => {\r\n        this.closeMenu();\r\n        var songQueue = this.state.songQueue;\r\n        var selectedSong = this.state.existingSongs[this.state.selectedItemIndex]\r\n        // selectedSong.index = Math.random().toString(36).slice(2);\r\n        songQueue.push(selectedSong)\r\n        // if (songQueue[0].url !== this.state.currentSongUrl) {\r\n        //     const newLocal = \"update-current-song\";\r\n        //     this.socket.emit(newLocal, { currentSong: songQueue[0].url })\r\n        //     // this.myAudio.load()\r\n        // }\r\n        this.getVideoDetails(songQueue[0].url)\r\n        this.setState({ songQueue: songQueue })\r\n    }\r\n\r\n    youtubeSearchFunction = () => {\r\n        this.setState({ loaderDisplay: true }, () => {\r\n            simpleyt(this.state.searchBarText).then(result => {\r\n                console.log(result)\r\n                this.setState({ searchResults: result, loaderDisplay: false })\r\n            })\r\n        })\r\n    }\r\n\r\n    tutorialSearchFunction = () => {\r\n        const songTitle = \"Adele - Hello\";\r\n        var index = 0;\r\n        console.log(\"here\")\r\n        var typingInterval = setInterval(() => {\r\n            this.setState({ searchBarText: this.state.searchBarText + songTitle[index] }, () => {\r\n                if (index === songTitle.length - 1) {\r\n                    clearInterval(typingInterval)\r\n                    this.youtubeSearchFunction();\r\n                } else {\r\n                    index++;\r\n                    console.log(this.state.searchBarText)\r\n                }\r\n            })\r\n        }, 200);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        var existingSongsList = [];\r\n        var queueSongsList = [];\r\n        var searchResults = [];\r\n\r\n        existingSongsList = this.state.existingSongs.length === 0 ? [] : this.state.existingSongs.sort().map((set, index) => {\r\n            return (\r\n                <ListItem key={`${set.title}---index`}\r\n                    className={classes.listItemRoot}\r\n                    onClick={() => {\r\n                        this.setState({\r\n                            selectedItemIndex: index\r\n                        }, () => {\r\n                            this.addToQueue()\r\n                        })\r\n                    }}\r\n                >\r\n                    <ListItemText\r\n                        primary={set.title}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton className={classes.iconButton}\r\n                            name={set.title}\r\n                            onClick={(event) => {\r\n                                this.setState({\r\n                                    selectedItemIndex: index,\r\n                                    menuAnchor: event.currentTarget\r\n                                });\r\n                            }}\r\n                        >\r\n                            <MoreVert className={classes.icons} />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            );\r\n        })\r\n\r\n        queueSongsList = this.state.songQueue.length === 0 ? [] : this.state.songQueue.map((set, index) => {\r\n            return (\r\n                <Draggable\r\n                    key={`${set.title}--${index}`}\r\n                    draggableId={`${set.title}-${index}`}\r\n                    index={index}\r\n                    style={(_isDragging, draggableStyle) => ({ ...draggableStyle, position: 'static' })}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            {...provided.draggableProps.style}\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                            style={this.getItemStyle(\r\n                                snapshot.isDragging,\r\n                                provided.draggableProps.style\r\n                            )}\r\n                        >\r\n                            <ListItem\r\n                                className={classes.listItemRoot}\r\n                                selected={this.state.selectedItemIndex === index}\r\n                                onClick={() => {\r\n                                    this.playSong(index)\r\n                                }}\r\n                            >\r\n                                <ListItemIcon\r\n                                    {...provided.dragHandleProps}\r\n                                >\r\n                                    <DragIndicator className={classes.icons} />\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={set.title}\r\n                                />\r\n\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton className={classes.iconButton}\r\n                                        name={set.title}\r\n                                        onClick={(event) => {\r\n                                            var array = this.state.songQueue;\r\n                                            array.splice(index, 1)\r\n                                            this.setState({ songQueue: array },\r\n                                                () => {\r\n                                                    if (array.length === 0) {\r\n                                                        var data = {\r\n                                                            title: \"\",\r\n                                                            songUrl: \"\",\r\n                                                            thumbnail_url: \"\"\r\n                                                        }\r\n                                                        console.log(array)\r\n                                                        this.props.dispatchToStore(\"SET_SONG_DETAILS\", data)\r\n                                                    }\r\n                                                    else if (index === 0) {\r\n                                                        this.getVideoDetails(array[0].url)\r\n                                                    }\r\n                                                }\r\n                                            )\r\n                                        }}\r\n                                    >\r\n                                        <Delete className={classes.icons} />\r\n                                    </IconButton>\r\n                                </ListItemSecondaryAction>\r\n                                {/* {provided.placeholder} */}\r\n                            </ListItem>\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            );\r\n        })\r\n\r\n        searchResults = this.state.searchResults.length === 0 ? [] : this.state.searchResults.map((item, index) => {\r\n            return (\r\n                <ListItem\r\n                    className={classes.searchResultListItemRoot}\r\n                    key={index}\r\n                    onClick={() => {\r\n                        var existingSongs = this.state.existingSongs;\r\n                        var song = {\r\n                            title: item.title,\r\n                            url: item.uri\r\n                        }\r\n                        existingSongs.push(song)\r\n\r\n                        var existingSongsList = existingSongs.filter((item, index, array) => array.findIndex(elem => (elem.title === item.title)) === index)\r\n\r\n\r\n                        this.setState({\r\n                            existingSongs: existingSongsList.sort(),\r\n                            leftListTabValue: 0,\r\n                            searchBarText: \"\",\r\n                            searchResults: []\r\n                        }, () => {\r\n                            var data = this.props.globalState.userData;\r\n                            data.songs = this.state.existingSongs\r\n                            Service.updateSongList(data)\r\n                        })\r\n                    }}\r\n                >\r\n                    <img src={item.thumbnails[0].url} className=\"search-results-image\" alt=\"Youtube Item\" />\r\n                    <ListItemText\r\n                        primary={item.title}\r\n                        secondary={item.author.name}\r\n                        classes={{\r\n                            primary: classes.searchResultListItemTextPrimary,\r\n                            secondary: classes.searchResultListItemTextSecondary,\r\n                        }}\r\n                    />\r\n                </ListItem>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"dashboard\">\r\n\r\n                {/* Tutorial Component */}\r\n                {this.props.globalState.displayTutorial ?\r\n                    <Tutorial\r\n                        tutorialSearchFunction={() => this.tutorialSearchFunction()}\r\n                        getExistingSongs={() => this.getExistingSongs()}\r\n                        setTutorialComponentsState={(state) => this.setTutorialDetailsState(state)}\r\n                    />\r\n                    : null}\r\n                <div className=\"hide-background\"\r\n                    style={{\r\n                        display: this.props.globalState.displayTutorial ? \"block\" : \"none\"\r\n                    }}\r\n                ></div>\r\n\r\n                {isMobile ?\r\n\r\n                    // Mobile Screens\r\n\r\n                    <div className=\"player-and-list-component\">\r\n\r\n                    </div>\r\n                    :\r\n\r\n                    //    Large Screens \r\n\r\n                    <div className=\"player-and-list-component\">\r\n\r\n                        {/* Left List */}\r\n                        <div className=\"list-left\"\r\n                            style={{\r\n                                boxShadow: this.props.globalState.displayTutorial && (this.state.tutorialScreen !== 1 && this.state.tutorialScreen !== 2 && this.state.tutorialScreen !== 4 && this.state.tutorialScreen !== 5) ? \"none\" : \"white 0px 0px 10px\",\r\n                            }}\r\n                        >\r\n                            <div style={{\r\n                                background: \"rgba(0,0,0,0.8)\",\r\n                                height: \"100%\",\r\n                                width: \"50%\",\r\n                                position: \"absolute\",\r\n                                top: \"0\",\r\n                                zIndex: \"1\",\r\n                                display: this.props.globalState.displayTutorial ? \"block\" : \"none\",\r\n                                animation: this.props.globalState.displayTutorial && (this.state.tutorialScreen !== 1 && this.state.tutorialScreen !== 2 && this.state.tutorialScreen !== 4 && this.state.tutorialScreen !== 5) ? \"none\" : \"animate-div 1s ease-in-out forwards\"\r\n                            }}></div>\r\n                            <TabContext\r\n                                value={this.state.leftListTabValue}\r\n                                className={classes.tabContext}\r\n                            >\r\n                                <Tabs\r\n                                    className={`${classes.tabsRoot} ${classes.leftTabsRoot}`}\r\n                                    variant=\"fullWidth\"\r\n                                    value={this.state.leftListTabValue}\r\n                                    onChange={(event, newValue) => {\r\n                                        this.setState({\r\n                                            leftListTabValue: newValue\r\n                                        })\r\n                                    }}\r\n                                    indicatorColor=\"none\"\r\n                                >\r\n                                    <Tab value={0} label=\"Existing Songs\" />\r\n                                    <Tab value={1} label=\"Add a new Song\" />\r\n                                </Tabs>\r\n                                {/* Left side tab Panel 1 */}\r\n                                <TabPanel\r\n                                    value={0}\r\n                                    className={`${classes.tabPanel} ${classes.leftTabPanel}`}\r\n                                >\r\n                                    {/* Loader Display */}\r\n                                    <Loader background=\"linear-gradient(to right, #101010, #252525)\" display={this.state.loaderDisplay} />\r\n\r\n                                    <div className=\"tabpanel-inner-container\">\r\n                                        {existingSongsList.length === 0 ?\r\n                                            <Typography variant=\"h5\">Your List is Empty <FontAwesomeIcon icon={faFrown} />\r\n                                            </Typography>\r\n                                            :\r\n                                            <List className={classes.listRoot}>\r\n                                                {existingSongsList}\r\n                                            </List>\r\n                                        }\r\n\r\n                                    </div>\r\n                                    <Menu\r\n                                        className={classes.menuRoot}\r\n                                        anchorEl={this.state.menuAnchor}\r\n                                        onClose={this.closeMenu}\r\n                                        keepMounted\r\n                                        open={Boolean(this.state.menuAnchor)}\r\n                                    >\r\n                                        <MenuItem\r\n                                            className={classes.menuItemRoot}\r\n                                            onClick={this.addToQueue}\r\n                                        >\r\n                                            Add To Queue\r\n                                    </MenuItem>\r\n                                        <MenuItem\r\n                                            className={classes.menuItemRoot}\r\n                                            onClick={() => {\r\n                                                var existingSongsList = this.state.existingSongs;\r\n                                                existingSongsList.splice(this.state.selectedItemIndex, 1)\r\n                                                this.closeMenu();\r\n                                                this.setState({ existingSongs: existingSongsList }, () => {\r\n                                                    var data = this.props.globalState.userData;\r\n                                                    data.songs = this.state.existingSongs\r\n                                                    Service.updateSongList(data)\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            Remove Song\r\n                                    </MenuItem>\r\n                                    </Menu>\r\n                                </TabPanel>\r\n\r\n                                {/* Left side Tab Panel 2 */}\r\n                                <TabPanel\r\n                                    value={1}\r\n                                    className={`${classes.tabPanel} ${classes.leftTabPanel}`}\r\n                                >\r\n                                    <div className=\"tabpanel-inner-container\">\r\n\r\n                                        <Grid\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"flex-start\"\r\n                                            alignItems=\"center\"\r\n                                        >\r\n\r\n                                            <Grid container item\r\n                                                direction=\"row\"\r\n                                                justify=\"center\"\r\n                                                alignItems=\"flex-end\"\r\n                                            >\r\n                                                <TextField\r\n                                                    className={classes.textFieldRoot}\r\n                                                    placeholder=\"Search\"\r\n                                                    label=\"Search\"\r\n                                                    value={this.state.searchBarText}\r\n                                                    fullWidth={true}\r\n                                                    autoFocus={true}\r\n                                                    InputProps={{\r\n                                                        startAdornment: <InputAdornment position=\"start\"><Search className={classes.icons} /></InputAdornment>,\r\n                                                        classes: {\r\n                                                            input: classes.textFieldInput,\r\n                                                            underline: classes.textFieldUnderlineRoot\r\n                                                        }\r\n                                                    }}\r\n                                                    InputLabelProps={{\r\n                                                        classes: {\r\n                                                            root: classes.textFieldLabelRoot,\r\n                                                            focused: \"focused\",\r\n                                                            error: \"error\"\r\n                                                        }\r\n                                                    }}\r\n                                                    onChange={(event) => {\r\n                                                        // Add action\r\n                                                        this.setState({ searchBarText: event.target.value })\r\n                                                    }}\r\n                                                    onKeyPress={(event) => {\r\n                                                        if (event.code === \"Enter\")\r\n                                                            // send request to youtube developers\r\n                                                            this.youtubeSearchFunction()\r\n                                                    }}\r\n                                                />\r\n                                                <IconButton\r\n                                                    className={classes.iconButton}\r\n                                                    onClick={() => {\r\n                                                        // send request to youtube developers\r\n                                                        this.youtubeSearchFunction()\r\n                                                    }}\r\n                                                >\r\n                                                    <Search className={classes.icons} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item style={{ width: \"100%\", height: \"85%\" }}>\r\n                                            {/* Loader Display */}\r\n                                            <Loader padding=\"0px\" background=\"linear-gradient(to right, #101010, #252525)\" display={this.state.loaderDisplay} />\r\n                                            <List className={classes.listRoot}>\r\n                                                {searchResults}\r\n                                            </List>\r\n                                        </Grid>\r\n\r\n\r\n                                    </div>\r\n                                </TabPanel>\r\n\r\n                            </TabContext>\r\n                        </div>\r\n\r\n                        {/* player container */}\r\n                        <div className=\"player-container\" style={{\r\n                            animationName: this.props.globalState.displayTutorial ? \"change-aura-tutorial\" : \"change-aura\"\r\n                        }}>\r\n                            <div style={{\r\n                                background: \"rgba(0,0,0,0.8)\",\r\n                                height: \"100%\",\r\n                                width: \"100%\",\r\n                                position: \"absolute\",\r\n                                top: \"0\",\r\n                                zIndex: \"1\",\r\n                                display: this.props.globalState.displayTutorial ? \"block\" : \"none\"\r\n                            }}></div>\r\n                            <Player\r\n                                ref={(reference) => this.playerRef = reference}\r\n                                url={this.state.currentSongUrl}\r\n                                onPlayNextClicked={this.playNextSong}\r\n                                onPlayPreviousClicked={this.playPreviousSong}\r\n                            />\r\n                        </div>\r\n\r\n\r\n                        {/* Right List */}\r\n                        <div className=\"list-right\"\r\n                            style={{\r\n                                boxShadow: this.props.globalState.displayTutorial && (this.state.tutorialScreen !== 3 && this.state.tutorialScreen !== 4) ? \"none\" : \"white 0px 0px 10px\"\r\n                            }}\r\n                        >\r\n                            <div style={{\r\n                                background: \"rgba(0,0,0,0.8)\",\r\n                                height: \"100%\",\r\n                                width: \"50%\",\r\n                                position: \"absolute\",\r\n                                top: \"0\",\r\n                                zIndex: \"1\",\r\n\r\n                                display: this.props.globalState.displayTutorial ? \"block\" : \"none\",\r\n                                animation: this.props.globalState.displayTutorial && (this.state.tutorialScreen !== 3 && this.state.tutorialScreen !== 4) ? \"none\" : \"animate-div 1s ease-in-out forwards\"\r\n\r\n                            }}></div>\r\n                            <TabContext\r\n                                value={this.state.rightListTabValue}\r\n                                className={classes.tabContext}\r\n                            >\r\n                                <Tabs\r\n                                    className={`${classes.tabsRoot} ${classes.rightTabsRoot}`}\r\n                                    variant=\"fullWidth\"\r\n                                    value={this.state.rightListTabValue}\r\n                                    onChange={(event, newValue) => {\r\n                                        this.setState({\r\n                                            rightListTabValue: newValue\r\n                                        })\r\n                                    }}\r\n                                    indicatorColor=\"none\"\r\n                                >\r\n                                    <Tab value={0} label=\"Queue\" />\r\n                                </Tabs>\r\n                                <TabPanel\r\n                                    value={0}\r\n                                    className={`${classes.tabPanel} ${classes.rightTabPanel}`}\r\n                                >\r\n                                    <div className=\"tabpanel-inner-container\">\r\n                                        {this.state.songQueue.length === 0 ?\r\n                                            <Typography variant=\"h5\">Queue is Empty <FontAwesomeIcon icon={faFrown} />\r\n                                            </Typography>\r\n                                            :\r\n                                            <DragDropContext onDragEnd={(result) => this.onQueueDragEnd(result)}>\r\n                                                <Droppable droppableId=\"droppable-queue\" >\r\n                                                    {(provided, snapshot) => (\r\n                                                        <RootRef rootRef={provided.innerRef}>\r\n                                                            <List\r\n                                                                className={classes.listRoot}\r\n                                                                style={this.getListStyle(snapshot.isDraggingOver)}\r\n                                                            >\r\n                                                                {queueSongsList}\r\n                                                                {provided.placeholder}\r\n                                                            </List>\r\n                                                        </RootRef>\r\n                                                    )}\r\n                                                </Droppable>\r\n                                            </DragDropContext>\r\n                                        }\r\n\r\n                                    </div>\r\n                                </TabPanel>\r\n\r\n                            </TabContext>\r\n\r\n                        </div>\r\n                    </div>\r\n                }\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        globalState: state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { dispatchToStore: (type, data) => { dispatch({ type, data }) } }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(useStyles)(Host));","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\CustomRoutes\\ProtectedRoute.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Error404\\Error404.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Party\\Party.jsx",["153"],"import React, { Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\"\r\nimport * as Service from \"./../Services/ServiceCalls\"\r\n\r\nclass Party extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.socket = socketIOClient();\r\n        this.userData = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // this.socket.connect();\r\n        this.socket.emit(\"connect-to-room\", \"bliss\")\r\n        var myAudio = document.getElementById(\"audio\")\r\n        this.socket.on(\"play-pause\", (data) => {\r\n            if (data.status) {\r\n                // send socket request\r\n                myAudio.play();\r\n                console.log(\"play\", data)\r\n            } else {\r\n                // send socket request\r\n                myAudio.pause();\r\n                console.log(\"paused\", data)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <audio id=\"audio\" controls >\r\n                    <source src={`/getStream?partyName=bliss`} type=\"audio/mpeg\"></source>\r\n                </audio>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Party;","C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\reducer.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\redux\\initialState.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Services\\ServiceCalls.js",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Carousel\\Carousel.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Loader\\Loader.jsx",[],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Player\\Player.jsx",["154","155"],"C:\\Users\\144861\\Desktop\\synk-music-backend\\synk-music\\src\\components\\Tutorial\\Tutorial.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\index.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\reportWebVitals.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\App.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\store.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Background\\Background.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Host\\Host.jsx",["156"],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Home\\Home.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Header\\Header.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Party\\Party.jsx",["157"],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Error404\\Error404.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\CustomRoutes\\ProtectedRoute.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\initialState.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\redux\\reducer.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Services\\ServiceCalls.js",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Loader\\Loader.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Player\\Player.jsx",["158","159"],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Tutorial\\Tutorial.jsx",[],"D:\\Desktop Right\\synk-music-backend\\synk-music\\src\\components\\Carousel\\Carousel.jsx",[],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":349,"column":37,"nodeType":"166","messageId":"167","endLine":349,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":3,"column":13,"nodeType":"170","messageId":"171","endLine":3,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":53,"column":61,"nodeType":"166","messageId":"167","endLine":53,"endColumn":63},{"ruleId":"164","severity":1,"message":"165","line":233,"column":56,"nodeType":"166","messageId":"167","endLine":233,"endColumn":58},{"ruleId":"164","severity":1,"message":"165","line":380,"column":33,"nodeType":"166","messageId":"167","endLine":380,"endColumn":35},{"ruleId":"168","severity":1,"message":"169","line":3,"column":13,"nodeType":"170","messageId":"171","endLine":3,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":53,"column":61,"nodeType":"166","messageId":"167","endLine":53,"endColumn":63},{"ruleId":"164","severity":1,"message":"165","line":233,"column":56,"nodeType":"166","messageId":"167","endLine":233,"endColumn":58},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Service' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]